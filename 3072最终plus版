#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QKeyEvent>
#include <QPushButton>
#include <QPainter>
#include <QTime>
#include <QDebug> //用来 Debug
#include <QMessageBox>//自定义消息提示框


QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT


public:
    explicit MainWindow(QWidget *parent = nullptr);
    ~MainWindow();
    void paintEvent(QPaintEvent *);
    void keyPressEvent(QKeyEvent *event);

    void PressUp();
    void PressDown();
    void PressLeft();
    void PressRight();
    void myRand();

    QPushButton *button;
    int s[6][6];
    int score=0;
    bool state;

    struct Ns{
        int i;
        int j;
    };


public slots:
    void slotStart();                 //槽函数

private:
    Ui::MainWindow *ui;
};
#endif // MAINWINDOW_H

#include "mainwindow.h"

#include <QApplication>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    MainWindow w;
        //显示窗体
    w.setFixedSize(320,480);        //设置窗体固定的长宽
    w.setWindowTitle("3072");       //设置窗体名
    w.show();
    return a.exec();
}
#include "mainwindow.h"
#include "./ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    //初始化
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            s[i][j]=0;
        }
    }
    button = new QPushButton("开始游戏",this);
    button->setGeometry(60,400,200,50);//从(60,400)做一个200*50的按钮
    //随机函数
    srand(uint(QTime(0,0,0).secsTo(QTime::currentTime())));

    connect(button,SIGNAL(clicked()),this,SLOT(slotStart()));

}

MainWindow::~MainWindow()
{
    delete ui;
}
void MainWindow::paintEvent(QPaintEvent *)
{
    QPainter p(this);
    p.setBrush(Qt::blue);
    p.setFont(QFont("楷体",20,700,false));

    QString strscore;
    p.drawText(QPoint(20,60),"分数: "+QString::number(score));

    for (int i=0;i<4;i++) {
        for (int j=0;j<4;j++) {
            p.setPen(Qt::transparent);//?
            if(s[i][j]==0){
                p.setBrush(QColor(255,250,222,255));
                p.drawRect(i*60+40,j*60+120,55,55);
            }
            else if (s[i][j]==3) {
                p.setBrush(QColor(255,229,168,255));
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("楷体",10,700,false));
                //在方块中 绘制Text， 并且文本位置位于中部
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(3),QTextOption(Qt::AlignCenter));
            }
            else if (s[i][j]==6) {
                p.setBrush(QColor(255,197,136,255));
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("楷体",10,700,false));
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(6),QTextOption(Qt::AlignCenter));
            }
            else if (s[i][j]==12) {
                p.setBrush(QColor(251,179,129,255));
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("楷体",10,700,false));
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(12),QTextOption(Qt::AlignCenter));
            }
            else if (s[i][j]==24) {
                p.setBrush(QColor(250,160,99,255));
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("微软雅黑",10,700,false));
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(24),QTextOption(Qt::AlignCenter));
            }
            else if (s[i][j]==48) {
                p.setBrush(QColor(251,103,55,255));
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("楷体",10,700,false));
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(48),QTextOption(Qt::AlignCenter));
            }
            else if (s[i][j]==96) {
                p.setBrush(QColor(213,92,14,255));
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("楷体",10,700,false));
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(96),QTextOption(Qt::AlignCenter));
            }
            else if (s[i][j]==192) {
                p.setBrush(QColor(252,161,159,255));
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("楷体",10,700,false));
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(192),QTextOption(Qt::AlignCenter));
            }
            else if (s[i][j]==384) {
                p.setBrush(QColor(248,126,124,147));
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("楷体",10,700,false));
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(384),QTextOption(Qt::AlignCenter));
            }
            else if (s[i][j]==768) {
                p.setBrush(QColor(255,50,80,255));
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("微软雅黑",10,700,false));
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(768),QTextOption(Qt::AlignCenter));
            }
            else if (s[i][j]==1536) {
                p.setBrush(QColor(188,25,22,255));
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("楷体",10,700,false));
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(1536),QTextOption(Qt::AlignCenter));
            }
            else if (s[i][j]==3072) {
                p.setBrush(QColor(245,69,67,15));
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("微软雅黑",10,700,false));
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(3072),QTextOption(Qt::AlignCenter));
            }
            else{
                p.setBrush(Qt::darkBlue);
                p.drawRect(i*60+40,j*60+120,55,55);
                p.setPen(Qt::black);
                p.setFont(QFont("楷体",10,700,false));
                p.drawText(QRectF(i*60+40,j*60+120,55,55),QString::number(s[i][j]),QTextOption(Qt::AlignCenter));
            }
        }
    }
}

void MainWindow::keyPressEvent(QKeyEvent *event)
{
    if(!state){
        return ;
    }
    switch (event->key()) {
    case Qt::Key_W:
        PressUp();
        break;

    case Qt::Key_S:
        PressDown();
        break;

    case Qt::Key_A:
        PressLeft();
        break;

    case Qt::Key_D:
        PressRight();
        break;

    default:
        return;//忽略其他按钮
    }
    myRand();
    update();
}
void MainWindow::slotStart(){
    QMessageBox::about(this,"游戏规则","WSAD控制方块上下左右移动");
    score=0;
    for (int i=0;i<4;i++) {
        for (int j=0;j<4;j++) {
            s[i][j]=0;
        }
    }
    button->setText("重新游戏");

    int randi=rand()%4;
    int randj=rand()%4;
    s[randi][randj]=3;

    state=true;
    update();
}
void MainWindow::PressUp(){
    //移动
    for (int i=0;i<4;i++) {
        for (int j=1;j<4;j++) {
            if(s[i][j]==0)continue;
            for (int p=0;p<j;p++) {
                //查看前面是否有空格子可移动
                if(s[i][p]==0){
                    s[i][p]=s[i][j];
                    s[i][j]=0;
                    break;
                }
            }
        }
    }
    //相加
    for (int i=0;i<4;i++) {
        for (int j=0;j<3;j++) {
            if(s[i][j]==s[i][j+1]){
                s[i][j]=2*s[i][j];
                s[i][j+1]=0;
                score+=s[i][j];
                for (int p=j+2;p<4;p++) {
                    s[i][p-1]=s[i][p];
                }
            }
        }
    }
}
void MainWindow::PressDown(){
    //移动
    for (int i=0;i<4;i++) {
        for (int j=2;j>=0;j--) {
            if(s[i][j]==0)continue;
            for (int p=3;p>j;p--) {
                //查看前面是否有空格子可移动
                if(s[i][p]==0){
                    s[i][p]=s[i][j];
                    s[i][j]=0;
                    break;
                }
            }
        }
    }
    //相加
    for (int i=0;i<4;i++) {
        for (int j=3;j>0;j--) {
            if(s[i][j]==s[i][j-1]){
                s[i][j]=2*s[i][j];
                s[i][j-1]=0;
                score+=s[i][j];
                for (int p=j-2;p>=0;p--) {
                    s[i][p+1]=s[i][p];
                }
            }
        }
    }
}
void MainWindow::PressLeft(){
    //移动
    for (int j=0;j<4;j++) {
        for (int i=1;i<4;i++) {
            if(s[i][j]==0){
                continue;
            }
            for (int p=0;p<i;p++) {
                //查看前面是否有空格可移入
                if(s[p][j] == 0){
                    s[p][j] = s[i][j];
                    s[i][j] = 0;
                    break;
                }
            }
        }
    }
    //相加
    for (int j=0;j<4;j++) {
        for (int i=0;i<3;i++) {
            if(s[i][j]==s[i+1][j]){
                s[i][j]=s[i][j]*2;
                score+=s[i][j];
                s[i+1][j]=0;
                for(int p=i+2;p<4;p++){
                    s[p-1][j] = s[p][j];
                }
            }
        }
    }
}
void MainWindow::PressRight(){
    //移动
    for (int j=0;j<4;j++) {
        for (int i=2;i>=0;i--) {
            if(s[i][j]==0){
                continue;
            }
            for (int p=3;p>i;p--) {
                //查看前面是否有空格可移入
                if(s[p][j] == 0){
                    s[p][j] = s[i][j];
                    s[i][j] = 0;
                    break;
                }
            }
        }
    }
    //相加
    for (int j=0;j<4;j++) {
        for (int i=3;i>=0;i--) {
            if(s[i][j]==s[i-1][j]){
                s[i][j]=s[i][j]*2;
                s[i-1][j]=0;
                score+=s[i][j];
                for(int p=i-2;p>=0;p--){
                    s[p+1][j] = s[p][j];
                }
            }
        }
    }
}
void MainWindow::myRand(){
    int i=0,j=0;
    //找出格子
    struct Ns n[15];
    int ni=0;
    for (i=0;i<4;i++) {
        for (j=0;j<4;j++) {
            if(s[i][j]==0){
                n[ni].i=i;
                n[ni].j=j;
                ni++;
            }
        }
    }

    //判断游戏是否结束
    if (ni==0) {
        for (i=0;i<4;i++) {
            for (j=0;j<3;j++) {
                if(s[i][j]==s[i][j+1]){
                    return;
                }
            }
        }
        for (j=0;j<4;j++) {
            for (i=0;i<3;i++) {
                if(s[i][j]==s[i+1][j]){
                    return;
                }
            }
        }
        QMessageBox::about(this,"游戏失败","分数为："+QString::number(score)+" ");
        return;
    }
    int rand1=rand()%ni;
    s[n[rand1].i][n[rand1].j]=3;
}
